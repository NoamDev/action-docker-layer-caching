name: Readme Test

on:
  push: 
    branches:
    - master
  schedule:
  - cron: 0 0 */3 * *

jobs:
  no_cache_build:
    runs-on: ubuntu-latest

    steps:
    - run: docker image ls -q | xargs docker rmi
    - uses: actions/checkout@v2
    - run: docker-compose -f test_project/docker-compose.yml -p test_project pull

    - uses: satackey/action-docker-layer-caching@v0.0.8
      with:
        key: docker-layer-caching-${{ github.workflow }}-${{ github.event_name }}-{hash}
        restore-keys: docker-layer-caching-${{ github.workflow }}-${{ github.event_name }}-

    - run: docker image ls -q | xargs docker rmi
    - run: docker-compose -f test_project/docker-compose.yml -p test_project build --no-cache

  cached_build:
    runs-on: ubuntu-latest
    needs:
    - no_cache_build

    steps:
    - run: docker image ls -q | xargs docker rmi
    - uses: actions/checkout@v2
    - run: docker-compose -f test_project/docker-compose.yml -p test_project pull

    - uses: satackey/action-docker-layer-caching@v0.0.8
      with:
        key: docker-layer-caching-${{ github.workflow }}-${{ github.event_name }}-{hash}
        restore-keys: docker-layer-caching-${{ github.workflow }}-${{ github.event_name }}-

    - name: Get cached image ID
      run: echo ::set-output name=id::$(docker image ls -q test_project_node)
      id: cached

    - run: docker-compose -f test_project/docker-compose.yml -p test_project build

    - name: Show built image ID
      run: echo ::set-output name=id::$(docker image ls -q test_project_node)
      id: latest

    - name: Compare cached ID and after build ID
      run: |
        if [ ! '${{ steps.cached.outputs.id }}' = '${{ steps.latest.outputs.id }}' ];then
          echo cached != latest
          exit 1
        fi

